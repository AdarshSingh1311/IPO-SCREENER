# -*- coding: utf-8 -*-
"""ipo screener github.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15c6N27h5b9K5taAP8rCARwpqCOXLR-P4
"""

!pip install pandas_ta

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from bs4 import BeautifulSoup as bs
import requests

import json

import re

import pandas_ta as ta

import  time

header =   {  'Accept': '*/*' ,
              'Accept-Encoding':'gzip, deflate, br,zstd' ,
              'Accept-Language': 'en-US,en;q=0.9' ,
              'Origin':'https://www.moneycontrol.com' ,
              'Priority': 'u=1, i',
              'Referer':'https://www.moneycontrol.com/',
              'Sec-Ch-Ua-Mobile':'?0' ,
              'Sec-Ch-Ua-Platform':"Windows" ,
              'Sec-Fetch-Dest':'empty' ,
              'Sec-Fetch-Mode':'cors' ,
              'Sec-Fetch-Site':'same-site' ,
              'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36',
              'render_js': 'True' }

req = requests.get('https://www.moneycontrol.com/ipo/listed-ipos/')

soup = bs(req.content, 'html.parser')

txt = soup.find_all("script" , id = "__NEXT_DATA__")[0].text

json = json.loads(txt)
final = json['props']['pageProps']['ipoTableData']['listedIpo']

ipo_data = pd.DataFrame(final)
ipo_data

url1  =  'https://query2.finance.yahoo.com/v8/finance/chart/'
url2  =  '.NS?period1=1716443400&period2=1716737400&interval=1h&'
url3  =  'includePrePost=true&events=div%7Csplit%7Cearn&useYfid=true&lang=en-US&region=US'

for ind, stk in enumerate(ipo_data.company_name) :

  url_com = ipo_data.iloc[ind]['url']
  url_com =  'https://www.moneycontrol.com/india/stockpricequote/' + url_com

  req = requests.get( url_com )
  soup = bs(req.content, 'html.parser')
  sc = soup.find_all('div' , id = 'company_info')[0]
  regex_obj = re.compile(r'NSE:\n\D+\n')
  find = regex_obj.search(sc.text)
  stock_code = find.group().split('\n')[1]

  if len(stock_code) != 0 :
    try :
      url = url1 + stock_code +  url2 + url3
      price_data = requests.get(url, headers = header).json()['chart']['result'][0]['indicators']['quote'][0]['close']

    except :
      url = url1 + stock_code + '-ST' + url2 + url3
      price_data = requests.get( url, headers = header).json()['chart']['result'][0]['indicators']['quote'][0]['close']

  adj_price = pd.Series(filter(lambda x : x is not None , price_data))
  if len(adj_price ) > 5 :
    ema = ta.ema( adj_price, length = int(len(price_data)*0.2)  ).iloc[-1]
    if adj_price.iloc[-1] > ema :
      print(stk, 'IS ABOVE ITS EMA')
    else :
      print(stk, 'IS BELOW ITS EMA')

"""
plt.title(stk)
plt.figure(figsize = (12,6))
plt.plot(price_data)
plt.xlabel('TICKS')
plt.ylabel('PRICE') """

